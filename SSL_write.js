/*
 * Auto-generated by Frida. Please modify to match the signature of SSL_write.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: http://www.frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call SSL_write.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use Memory.readUtf8String(args[0]) if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */

  onEnter: function (log, args, state) {    
   function dumpAddr(info, addr, size) {
      if (addr.isNull())
         return;
      console.log('Data dump ' + info + ' :');


      try{
          var buf = Memory.readByteArray(addr, size);
          // If you want color magic, set ansi to true
          console.log(hexdump(buf, { offset: 0, length: size, header: true, ansi: false }));

      }catch(error){

      }
  };

  function p32(value){
    var str = value.toString(16);
  var padding = "";
    for(var i = str.length; i < 8; i++)
      padding = "0"+padding
    str = padding+str
  //console.log(str);
  var result = "";
  for(var i = 0; i < 8; i+=2)
    result += "\\x" + str[i] + str[i+1]
  return result;
  };
  
  function StringToArrayBuffer(str) {
    var buf = new ArrayBuffer(str.length);
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
      bufView[i] = str.charCodeAt(i);
    }
    return buf;
  }

  /* Start */

  SIZE = 0x500;
  INDEX = 1;
  HOMING = 0x97;
  VOICE= 0x9e;
  PHOTO= 0x9c;
  //dumpAddr('dump args[1]',args[1],SIZE);
  //log("SSL_write("+"args1"+Memory.readUtf8String(args[1])+")");
  
  var buf = Memory.readByteArray(args[INDEX], SIZE);
  var arr = new Uint8Array(buf);
  var str = "";
  
  for(var i = 0; i < arr.length; i++) {
      str += String.fromCharCode(arr[i]);
  }

  console.log(str);
  console.log("");
  
},
  

  /**
   * Called synchronously when about to return from SSL_write.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave: function (log, retval, state) {
  }
}
